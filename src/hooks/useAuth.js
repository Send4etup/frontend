import { useState, useEffect, useCallback, useRef } from 'react';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:3213/api';

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Mini Apps
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram, —Ç–∞–∫ –∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
 */
export const useAuth = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [error, setError] = useState(null);
    const [token, setToken] = useState(null);

    // Ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const authInProgress = useRef(false);

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
     */
    const getTelegramUserData = useCallback(() => {
        try {

            const telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
            return {
                telegram_id: telegramUser.id,
                first_name: telegramUser.first_name,
                last_name: telegramUser.last_name,
                username: telegramUser.username,
                photo_url: telegramUser.photo_url,
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
            return null;
        }
    }, []);

    const getTelegramId = useCallback( () => {
        try {

            const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            return {
                telegram_id: telegramId,
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
            return null;
        }
    }, [])

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    const authenticateUser = useCallback(async (userData) => {
        if (authInProgress.current) {
            console.log('üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return null;
        }

        authInProgress.current = true;
        setIsLoading(true);
        setError(null);

        try {
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', userData);

            const response = await fetch(`${API_BASE_URL}/auth/telegram`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ telegram_id: userData.telegram_id})
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
            }

            const authResult = await response.json();
            const backend_token = authResult.access_token;
            const telegram_hash = window.Telegram.WebApp.initDataUnsafe.hash;

            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', authResult, ', hash: ', telegram_hash);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            const authData = {
                token: authResult.access_token,
                user: authResult.user,
                timestamp: Date.now()
            };

            localStorage.setItem('backend_token', backend_token);
            localStorage.setItem('telegram_auth', JSON.stringify(authData));
            localStorage.setItem('telegram_hash', JSON.stringify(telegram_hash));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setToken(authResult.token);
            setUser({
                telegram: window.Telegram.WebApp.initDataUnsafe,
                db: authResult.user
            });
            setIsAuthenticated(true);

            return authResult;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            setError(error.message);
            setIsAuthenticated(false);
            return null;
        } finally {
            setIsLoading(false);
            authInProgress.current = false;
        }
    }, []);

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
     */
    const restoreSession = useCallback(() => {
        try {

            const telegram_hash = window.Telegram.WebApp.initDataUnsafe.hash;
            const local_storage_hash = localStorage.getItem('telegram_hash');
            const savedAuth = localStorage.getItem('telegram_auth');

            if (telegram_hash === local_storage_hash) {
                const sessionAge = Date.now() - local_storage_hash.timestamp;
                const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

                if (sessionAge > maxAge) {
                    console.log('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                    localStorage.removeItem('telegram_auth');
                    localStorage.removeItem('telegram_hash');

                    return false;
                }

                const authData = JSON.parse(savedAuth);

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                setToken(authData.token);
                setUser({
                    telegram: window.Telegram.WebApp.initDataUnsafe.user,
                    db: authData.user
                });
                setIsAuthenticated(true);

                console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', authData.user);
                return true;
            } else {
                localStorage.removeItem('telegram_auth');
                localStorage.removeItem('telegram_hash');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            localStorage.removeItem('telegram_auth');
            return false;
        }
    }, []);

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    const initializeAuth = useCallback(async () => {
        setIsLoading(true);

        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        const sessionRestored = restoreSession();

        if (!sessionRestored) {
            // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            const userData = getTelegramUserData();
            const telegramId  =getTelegramId();

            if (telegramId) {
                await authenticateUser(telegramId);
            } else {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                setIsLoading(false);
            }
        } else {
            setIsLoading(false);
        }
    }, [restoreSession, getTelegramUserData, authenticateUser]);

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    const logout = useCallback(() => {
        console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');

        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('telegram_auth');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUser(null);
        setToken(null);
        setIsAuthenticated(false);
        setError(null);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram WebApp –æ –≤—ã—Ö–æ–¥–µ
        if (window.Telegram?.WebApp?.close) {
            window.Telegram.WebApp.close();
        }
    }, []);

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const refreshUser = useCallback(async () => {
        if (!token) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/user/profile`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const userData = await response.json();
            setUser(prevUser => ({ ...prevUser, ...userData }));

            // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
            const savedAuth = JSON.parse(localStorage.getItem('telegram_auth') || '{}');
            savedAuth.user = { ...savedAuth.user, ...userData };
            localStorage.setItem('telegram_auth', JSON.stringify(savedAuth));

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }, [token]);

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    const getAuthHeaders = useCallback(() => {
        if (!token) {
            return {};
        }

        return {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
    }, [token]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        initializeAuth();
    }, [initializeAuth]);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    useEffect(() => {
        if (window.Telegram?.WebApp) {
            // –†–∞—Å—à–∏—Ä—è–µ–º WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            window.Telegram.WebApp.expand();

            // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            window.Telegram.WebApp.enableClosingConfirmation();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (window.Telegram.WebApp.MainButton) {
                window.Telegram.WebApp.MainButton.hide();
            }

            console.log('üì± Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
    }, []);

    // –ü—É–±–ª–∏—á–Ω—ã–π API —Ö—É–∫–∞
    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        user,
        isLoading,
        isAuthenticated,
        error,
        token,

        // –ú–µ—Ç–æ–¥—ã
        logout,
        refreshUser,
        getAuthHeaders,
        initializeAuth,


        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
        userDisplayName: user?.display_name || user?.first_name || user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        isTokenValid: !!token,
        subscriptionType: user?.subscription_type || 'free',
        tokensBalance: user?.tokens_balance || 0,
    };
};