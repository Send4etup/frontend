// src/hooks/useTelegramAuth.js
import { useState, useEffect, useCallback } from 'react';
import telegramAuthService from '../services/telegramAuthService';

export const useTelegramAuth = () => {
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [platformInfo, setPlatformInfo] = useState(null);

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    const initializeAuth = useCallback(async () => {
        try {
            setIsLoading(true);
            setError(null);

            console.log('üöÄ Initializing Telegram authentication...');

            // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
            const isInitialized = telegramAuthService.initialize();
            if (!isInitialized) {
                throw new Error('Failed to initialize Telegram Web App');
            }

            // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            const platform = telegramAuthService.getPlatformInfo();
            setPlatformInfo(platform);
            console.log('üì± Platform info:', platform);

            // –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –ø–æ–¥ Telegram
            telegramAuthService.setupTelegramUI();

            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            const isValidData = telegramAuthService.validateTelegramData();
            if (!isValidData) {
                console.warn('‚ö†Ô∏è Invalid Telegram data, using local user');

                // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                const localUser = telegramAuthService.createLocalUser();
                setUser(localUser);
                setIsAuthenticated(true);

                return localUser;
            }

            // –®–∞–≥ 5: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            console.log('üîê Authenticating user...');
            const authResult = await telegramAuthService.authenticateUser();

            if (authResult.success) {
                console.log('‚úÖ Authentication successful:', authResult.user);

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                if (authResult.user.is_new_user) {
                    telegramAuthService.showNotification(
                        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${authResult.user.first_name}! üéâ`,
                        'info'
                    );

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    telegramAuthService.sendTelegramEvent('user_registered', {
                        user_id: authResult.user.id,
                        platform: platform.platform
                    });
                }

                setUser(authResult.user);
                setIsAuthenticated(true);

                return authResult.user;
            } else {
                throw new Error(authResult.message || 'Authentication failed');
            }

        } catch (error) {
            console.error('‚ùå Authentication error:', error);
            setError(error.message);

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const fallbackUser = telegramAuthService.createLocalUser();
                setUser(fallbackUser);
                setIsAuthenticated(true);

                telegramAuthService.showNotification(
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.',
                    'error'
                );

                return fallbackUser;
            } catch (fallbackError) {
                console.error('‚ùå Fallback user creation failed:', fallbackError);
                setError('Failed to initialize user');
            }
        } finally {
            setIsLoading(false);
        }
    }, []);

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const refreshUserData = useCallback(async () => {
        if (!user?.id) return;

        try {
            setIsLoading(true);
            const updatedUser = await telegramAuthService.getUserData(user.id);
            setUser(updatedUser);

            console.log('üîÑ User data refreshed:', updatedUser);
            return updatedUser;
        } catch (error) {
            console.error('‚ùå Failed to refresh user data:', error);
            setError(error.message);
        } finally {
            setIsLoading(false);
        }
    }, [user?.id]);

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const updateUserPoints = useCallback((pointsToAdd) => {
        if (!user) return;

        const updatedUser = {
            ...user,
            current_points: (user.current_points || 0) + pointsToAdd,
            total_points: (user.total_points || 0) + pointsToAdd
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–∫–∞–∂–¥—ã–µ 100 –æ—á–∫–æ–≤ = –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
        const newLevel = Math.floor(updatedUser.total_points / 100) + 1;
        if (newLevel > user.level) {
            updatedUser.level = newLevel;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            telegramAuthService.showNotification(
                `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newLevel} —É—Ä–æ–≤–Ω—è!`,
                'info'
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            telegramAuthService.sendTelegramEvent('level_up', {
                user_id: user.id,
                new_level: newLevel,
                points: updatedUser.total_points
            });
        }

        setUser(updatedUser);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤
        telegramAuthService.sendTelegramEvent('points_earned', {
            user_id: user.id,
            points_added: pointsToAdd,
            total_points: updatedUser.total_points
        });

        return updatedUser;
    }, [user]);

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    const trackUserActivity = useCallback((activityType, activityData = {}) => {
        if (!user) return;

        telegramAuthService.sendTelegramEvent(activityType, {
            user_id: user.id,
            ...activityData
        });
    }, [user]);

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    const logout = useCallback(() => {
        setUser(null);
        setIsAuthenticated(false);
        setError(null);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞
        if (user) {
            telegramAuthService.sendTelegramEvent('user_logout', {
                user_id: user.id
            });
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        telegramAuthService.closeApp();
    }, [user]);

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    useEffect(() => {
        initializeAuth();
    }, [initializeAuth]);

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã Telegram
     */
    useEffect(() => {
        const handleThemeChanged = () => {
            console.log('üé® Telegram theme changed');
            telegramAuthService.setupTelegramUI();
        };

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try {
            if (window.Telegram?.WebApp?.onEvent) {
                window.Telegram.WebApp.onEvent('themeChanged', handleThemeChanged);

                return () => {
                    window.Telegram.WebApp.offEvent('themeChanged', handleThemeChanged);
                };
            }
        } catch (error) {
            console.warn('Theme change listener not available:', error);
        }
    }, []);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        user,
        isLoading,
        error,
        isAuthenticated,
        platformInfo,

        // –ú–µ—Ç–æ–¥—ã
        refreshUserData,
        updateUserPoints,
        trackUserActivity,
        logout,

        // –£—Ç–∏–ª–∏—Ç—ã
        showNotification: telegramAuthService.showNotification.bind(telegramAuthService),
        closeApp: telegramAuthService.closeApp.bind(telegramAuthService)
    };
};