// src/pages/SchoolPage/SchoolPage.jsx - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { ChevronRight } from 'lucide-react';
import { createChat } from "../../services/chatAPI.js";
import './SchoolPage.css';
import { useNotifications, NotificationContainer } from '../../components/Notification/Notification.jsx';

// ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ê–ì–ï–ù–¢–û–í –ò–ó JSON
import {getStudyTools, getAgentPrompt, getAgentByAction} from '../../utils/aiAgentsUtils.js';

const SchoolPage = ({ user }) => {
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState('instruments');
    const [selectedSubject, setSelectedSubject] = useState('all');
    const [error, setError] = useState(null);
    const { notifications, removeNotification, showError } = useNotifications();

    // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –£–ß–ï–ë–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò–ó JSON
    const studyTools = getStudyTools();

    const subjects = [
        { id: 'all', name: '–í—Å–µ' },
        { id: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' },
        { id: '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', name: '–†—É—Å—Å–∫–∏–π' },
        { id: '—Ñ–∏–∑–∏–∫–∞', name: '–§–∏–∑–∏–∫–∞' },
        { id: '–±–∏–æ–ª–æ–≥–∏—è', name: '–ë–∏–æ–ª–æ–≥–∏—è' },
        { id: '—Ö–∏–º–∏—è', name: '–•–∏–º–∏—è' },
        { id: '–∏—Å—Ç–æ—Ä–∏—è', name: '–ò—Å—Ç–æ—Ä–∏—è' }
    ];

    // const handleToolClick = async (tool) => {
    //     try {
    //         setError(null); // –î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ error
    //
    //         console.log('üéØ Creating tool chat:', tool.action);
    //
    //         // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ü–†–û–ú–ü–¢ –ò–ó JSON –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    //         const agentPrompt = getAgentPrompt(tool.action);
    //         console.log('Agent prompt for', tool.action, ':', agentPrompt);
    //
    //         // ‚úÖ –°–û–ó–î–ê–ï–ú –ß–ê–¢ –ß–ï–†–ï–ó API (–∫–∞–∫ –≤ HomePage)
    //         const ChatCreateInfo = await createChat(tool.label, tool.action);
    //
    //         navigate(`/chat/${ChatCreateInfo.chat_id}`, {
    //             state: {
    //                 chatType: tool.action,
    //                 toolConfig: tool,
    //                 title: tool.label,
    //                 agentPrompt: agentPrompt, // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —á–∞—Ç
    //                 initialMessage: `–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É: ${tool.label}`
    //             }
    //         });
    //
    //     } catch (error) {
    //         console.error('Failed to create tool chat:', error);
    //         setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç'); // –î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ error
    //         // Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    //         navigate(`/chat/demo_${tool.id}`);
    //     }
    // };

    const handleToolClick = async (actionType) => {
        try {
            setError(null); // –î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ error

            console.log('üéØ Creating tool chat:', actionType);

            // ‚úÖ –ù–ê–•–û–î–ò–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –î–ï–ô–°–¢–í–ò–Ø –í JSON
            const actionConfig = getAgentByAction(actionType);
            if (!actionConfig) return;

            // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ü–†–û–ú–ü–¢ –ò–ó JSON –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
            const agentPrompt = getAgentPrompt(actionType);
            console.log('Agent prompt for', actionType, ':', agentPrompt);

            // ‚úÖ –°–û–ó–î–ê–ï–ú –ß–ê–¢ –ß–ï–†–ï–ó API (–∫–∞–∫ –≤ HomePage)
            const ChatCreateInfo = await createChat(actionConfig.label, actionType);

            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –£–°–ü–ï–®–ù–û–°–¢–¨ –°–û–ó–î–ê–ù–ò–Ø –ß–ê–¢–ê
            if (!ChatCreateInfo.success) {
                throw new Error(ChatCreateInfo.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç');
            }

            navigate(`/chat/${ChatCreateInfo.chat_id}`, {
                state: {
                    chatType: actionType,
                    title: actionConfig.label,
                    agentPrompt: agentPrompt,
                }
            });

        } catch (error) {
            console.error('Failed to create tool chat:', error);

            // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', {
                duration: 4000,
                showCloseButton: true
            });
        }
    };

    const handleTestClick = (testId) => {
        navigate(`/test/${testId}`);
    };

    const getSubjectColor = (subject) => {
        const colors = {
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '#ef4444',
            '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫': '#22c55e',
            '—Ñ–∏–∑–∏–∫–∞': '#3b82f6',
            '–±–∏–æ–ª–æ–≥–∏—è': '#10b981',
            '—Ö–∏–º–∏—è': '#f59e0b',
            '–∏—Å—Ç–æ—Ä–∏—è': '#8b5cf6'
        };
        return colors[subject] || '#43ff65';
    };

    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤
    const testsData = {
        'discriminant_math': {
            id: 'discriminant_math',
            title: '–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç',
            subject: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            date: '08.02.25',
            completedQuestions: 8,
            totalQuestions: 19
        },
        'roots_russian': {
            id: 'roots_russian',
            title: '–ö–æ—Ä–Ω–∏ –¥–µ—Ä/–¥–∏—Ä',
            subject: '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',
            date: '08.02.25',
            completedQuestions: 13,
            totalQuestions: 19
        }
    };

    const filteredTests = Object.values(testsData).filter(test => {
        if (selectedSubject === 'all') return true;
        return test.subject === selectedSubject;
    });

    return (
        <>
            {/* ‚úÖ –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô */}
            {/*<NotificationContainer*/}
            {/*    notifications={notifications}*/}
            {/*    onRemove={removeNotification}*/}
            {/*/>*/}
            <motion.div
                className="school-page"
                initial={{opacity: 0, y: 20}}
                animate={{opacity: 1, y: 0}}
                exit={{opacity: 0, y: -20}}
                transition={{duration: 0.5}}
            >

                <div className="home-container">
                    <motion.div
                        className="page-title"
                        initial={{opacity: 0, y: 30}}
                        animate={{opacity: 1, y: 0}}
                        transition={{duration: 0.3}}
                    >
                        <h1>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É—á–µ–±—ã</h1>
                    </motion.div>

                    {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
                    <motion.div
                        className="tab-switcher"
                        initial={{opacity: 0, y: 30}}
                        animate={{opacity: 1, y: 0}}
                        transition={{duration: 0.3}}
                    >
                        <motion.button
                            className={`tab-btn ${activeTab === 'instruments' ? 'active' : ''}`}
                            onClick={() => setActiveTab('instruments')}
                            whileHover={{scale: 1.05}}
                            whileTap={{scale: 0.95}}
                        >
                            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                        </motion.button>
                        <motion.button
                            className={`tab-btn ${activeTab === 'tests' ? 'active' : ''}`}
                            onClick={() => setActiveTab('tests')}
                            whileHover={{scale: 1.05}}
                            whileTap={{scale: 0.95}}
                        >
                            –¢–µ—Å—Ç—ã
                        </motion.button>
                    </motion.div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                    {activeTab === 'instruments' ? (
                        /* ‚úÖ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò–ó JSON */
                        <motion.div
                            className="tools-grid"
                            initial={{opacity: 0, y: 30}}
                            animate={{opacity: 1, y: 0}}
                            transition={{duration: 0.3}}
                        >
                            {studyTools.map((tool, index) => {
                                const IconComponent = tool.icon;
                                return (
                                    <motion.div
                                        key={tool.id}
                                        className="tool-card"
                                        onClick={() => handleToolClick(tool.action)}
                                        initial={{opacity: 0, y: 20}}
                                        animate={{opacity: 1, y: 0}}
                                        transition={{delay: index * 0.1}}
                                        whileHover={{scale: 1.02, x: 5}}
                                        whileTap={{scale: 0.98}}
                                    >
                                        <div className="tool-info">
                                            <div
                                                className="tool-icon-wrapper"
                                                style={{
                                                    width: '40px',
                                                    height: '40px',
                                                    borderRadius: '8px',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    justifyContent: 'center',
                                                    marginRight: '12px'
                                                }}
                                            >
                                                <IconComponent
                                                    className="tool-icon"
                                                    style={{
                                                        width: '20px',
                                                        height: '20px',
                                                        color: tool.iconColor
                                                    }}
                                                />
                                            </div>
                                            <div className="tool-text">
                                                <h3 className="tool-title">{tool.label}</h3>
                                                <p className="tool-subtitle">{tool.subtitle}</p>
                                            </div>
                                        </div>
                                        <ChevronRight className="tool-arrow"/>
                                    </motion.div>
                                );
                            })}
                        </motion.div>
                    ) : (
                        /* –¢–µ—Å—Ç—ã */
                        <motion.div
                            initial={{opacity: 0, y: 30}}
                            animate={{opacity: 1, y: 0}}
                            transition={{duration: 0.3}}
                        >
                            {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º */}
                            <div className="subjects-filter">
                                <div className="subjects-scroll">
                                    {subjects.map((subject) => (
                                        <button
                                            key={subject.id}
                                            className={`subject-chip ${selectedSubject === subject.id ? 'active' : ''}`}
                                            onClick={() => setSelectedSubject(subject.id)}
                                        >
                                            {subject.name}
                                        </button>
                                    ))}
                                </div>
                            </div>

                            {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ */}
                            <div className="tests-grid">
                                {filteredTests.map((test, index) => (
                                    <motion.div
                                        key={test.id}
                                        className="task-card"
                                        onClick={() => handleTestClick(test.id)}
                                        initial={{opacity: 0, y: 20}}
                                        animate={{opacity: 1, y: 0}}
                                        transition={{delay: index * 0.1}}
                                        whileHover={{scale: 1.02, x: 5}}
                                        whileTap={{scale: 0.98}}
                                    >
                                        <div className="task-header">
                                            <div className="task-info">
                                                <h3 className="task-title">{test.title}</h3>
                                                <div className="task-meta">
                                                <span
                                                    className="task-subject"
                                                    style={{
                                                        backgroundColor: getSubjectColor(test.subject),
                                                        color: '#000',
                                                        padding: '2px 8px',
                                                        borderRadius: '12px',
                                                        fontSize: '11px',
                                                        fontWeight: '500'
                                                    }}
                                                >
                                                    {test.subject}
                                                </span>
                                                    <span className="task-date">{test.date}</span>
                                                </div>
                                            </div>
                                            <ChevronRight className="task-arrow"/>
                                        </div>

                                        <div className="task-progress">
                                            <div className="progress-info">
                                            <span className="progress-text">
                                                {test.completedQuestions}/{test.totalQuestions}
                                            </span>
                                            </div>
                                            <div className="progress-bar">
                                                <div
                                                    className="progress-fill"
                                                    style={{
                                                        width: `${(test.completedQuestions / test.totalQuestions) * 100}%`,
                                                        backgroundColor: '#43ff65'
                                                    }}
                                                />
                                            </div>
                                        </div>
                                    </motion.div>
                                ))}
                            </div>
                        </motion.div>
                    )}
                </div>
            </motion.div>
        </>
    );
};

export default SchoolPage;