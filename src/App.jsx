// src/App.jsx - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AnimatePresence } from 'framer-motion';

// Hooks
import { useSimpleAuth } from './hooks/useSimpleAuth';
import { useBackendIntegration } from './hooks/useBackendIntegration';

// Pages
import HomePage from './pages/HomePage/HomePage';
import SchoolPage from './pages/SchoolPage/SchoolPage';
import EducationPage from './pages/EducationPage/EducationPage';
import ProfilePage from './pages/ProfilePage/ProfilePage';
import IdeasPage from './pages/IdeasPage/IdeasPage';
import VideosPage from './pages/VideosPage/VideosPage';
import TestPage from "./pages/TestPage/TestPage.jsx";
import AIChatPage from "./pages/ChatPage/ChatPage.jsx";
import NotFoundPage from "./pages/NotFoundPage/NotFoundPage.jsx";

// Components
import Layout from './components/Layout/Layout';
import LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';
import ErrorBoundary from './components/ErrorBoundary/ErrorBoundary';

// Styles
import './App.css';

// =====================================================
// –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô
// =====================================================

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const AuthError = ({ error, onRetry }) => (
    <div className="auth-error">
        <div className="auth-error-content">
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>{error}</p>
            <button onClick={onRetry} className="retry-btn">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
const SimpleLoader = () => (
    <div className="simple-loader">
        <LoadingSpinner fullScreen />
        <div className="loader-info">
            <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç—É...</p>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthRequired = ({ onRetry }) => (
    <div className="auth-required">
        <div className="auth-required-content">
            <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
            <p>–ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</p>
            <button onClick={onRetry} className="retry-btn">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    </div>
);

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞
const BackendStatusIndicator = ({ status }) => {
    const [showSuccess, setShowSuccess] = React.useState(true);

    // –°–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    React.useEffect(() => {
        if (status?.isOnline) {
            const timer = setTimeout(() => setShowSuccess(false), 3000);
            return () => clearTimeout(timer);
        }
    }, [status?.isOnline]);

    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!status || status.isChecking) {
        return null;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    if (!status.isOnline) {
        return (
            <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                background: 'linear-gradient(90deg, #f59e0b, #d97706)',
                color: '#000',
                padding: '6px 12px',
                fontSize: '13px',
                fontWeight: '500',
                zIndex: 9999,
                textAlign: 'center',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
                ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
            </div>
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    if (status.isOnline && showSuccess) {
        return (
            <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                background: 'linear-gradient(90deg, #43ff65, #22c55e)',
                color: '#000',
                padding: '6px 12px',
                fontSize: '13px',
                fontWeight: '500',
                zIndex: 9999,
                textAlign: 'center',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                animation: 'slideDown 0.3s ease-out'
            }}>
                ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç
            </div>
        );
    }

    return null;
};

// =====================================================
// –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =====================================================

function App() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const {
        user,
        isLoading,
        error,
        isAuthenticated,
        refreshUserData,
        updateUserPoints,
        trackUserActivity,
        logout,
        showNotification,
        retry
    } = useSimpleAuth();

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±—ç–∫–µ–Ω–¥–æ–º
    const {
        backendStatus,
        user: backendUser,
        authenticate: backendAuth,
        isAuthenticating,
        checkBackend
    } = useBackendIntegration();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    React.useEffect(() => {
        console.log('üîç App State:', {
            user: user ? `${user.display_name || user.username} (${user.subscription_type})` : null,
            isLoading,
            isAuthenticated,
            backendOnline: backendStatus?.isOnline,
            backendUser: backendUser ? `${backendUser.display_name}` : null
        });
    }, [user, isLoading, isAuthenticated, backendStatus, backendUser]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (isLoading) {
        return <SimpleLoader />;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if (error && !user) {
        return (
            <AuthError
                error={error}
                onRetry={retry}
            />
        );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!isAuthenticated || !user) {
        return <AuthRequired onRetry={retry} />;
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–æ–¥–∞–º–∏
    const userWithMethods = {
        ...user,
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        updatePoints: updateUserPoints,
        trackActivity: trackUserActivity,
        refresh: refreshUserData,
        showNotification,
        logout,

        // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
        backendStatus,
        backendUser,
        isBackendOnline: backendStatus?.isOnline || false,
        authenticateBackend: backendAuth,
        checkBackend,
        isBackendAuthenticating: isAuthenticating,

        // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±—ç–∫–µ–Ω–¥–∞)
        tokens_balance: backendUser?.tokens_balance || user.tokens_balance || 0,
        subscription_type: backendUser?.subscription_type || user.subscription_type || 'free'
    };

    return (
        <ErrorBoundary>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞ */}
            <BackendStatusIndicator status={backendStatus} />

            <Router>
                <AnimatePresence mode="wait">
                    <Routes>
                        <Route path="/" element={<Layout user={userWithMethods} />}>
                            <Route index element={<Navigate to="/home" replace />} />

                            {/* –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã */}
                            <Route
                                path="home"
                                element={<HomePage user={userWithMethods} />}
                            />
                            <Route
                                path="school"
                                element={<SchoolPage user={userWithMethods} />}
                            />
                            <Route
                                path="education"
                                element={<EducationPage user={userWithMethods} />}
                            />
                            <Route
                                path="profile"
                                element={<ProfilePage user={userWithMethods} />}
                            />
                            <Route
                                path="ideas"
                                element={<IdeasPage user={userWithMethods} />}
                            />

                            {/* –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è */}
                            <Route
                                path="videos"
                                element={<VideosPage user={userWithMethods} />}
                            />

                            {/* –°—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤ */}
                            <Route
                                path="test/:testId"
                                element={<TestPage user={userWithMethods} />}
                            />
                            <Route
                                path="chat/:chatId"
                                element={<AIChatPage user={userWithMethods} />}
                            />

                            <Route path="*" element={<NotFoundPage />} />
                        </Route>
                    </Routes>
                </AnimatePresence>
            </Router>
        </ErrorBoundary>
    );
}

export default App;