// src/App.jsx - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ï–ê–õ–¨–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AnimatePresence } from 'framer-motion';

// Pages
import HomePage from './pages/HomePage/HomePage';
import SchoolPage from './pages/SchoolPage/SchoolPage';
import EducationPage from './pages/EducationPage/EducationPage';
import ProfilePage from './pages/ProfilePage/ProfilePage';
import IdeasPage from './pages/IdeasPage/IdeasPage';
import VideosPage from './pages/VideosPage/VideosPage';
import TestPage from "./pages/TestPage/TestPage.jsx";
import AIChatPage from "./pages/ChatPage/ChatPage.jsx";
import NotFoundPage from "./pages/NotFoundPage/NotFoundPage.jsx";

// Components
import Layout from './components/Layout/Layout';
import LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';
import ErrorBoundary from './components/ErrorBoundary/ErrorBoundary';

// Hook –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
import { useAuth } from "./hooks/useAuth.js";

// import { csrfService } from './services/csrfService';

// Styles
import './App.css';
import ChatHistoryPage from "./pages/ChatHistoryPage/ChatHistoryPage.jsx";

// =====================================================
// –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô
// =====================================================

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthLoader = () => (
    <div className="app-loading">
        <div className="loading-container">
            <LoadingSpinner />
            <p>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...</p>
            <small>–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</small>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthError = ({ error, onRetry }) => (
    <div className="app-error">
        <div className="error-container">
            <h2>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p>{typeof error === 'object' ? JSON.stringify(error, null, 2) : error}</p>

            <div className="error-actions">
                <button onClick={onRetry} className="retry-btn">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
                <button onClick={() => window.location.reload()} className="reload-btn">
                    üîÉ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
            <small>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram</small>
        </div>
    </div>
);


// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const ConnectionStatus = ({ isOnline, isLoading }) => {
    const [showSuccess, setShowSuccess] = useState(false);

    useEffect(() => {
        if (isOnline && !isLoading) {
            setShowSuccess(true);
            const timer = setTimeout(() => setShowSuccess(false), 3000);
            return () => clearTimeout(timer);
        }
    }, [isOnline, isLoading]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (!isOnline && !isLoading) {
        return (
            <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                background: 'linear-gradient(90deg, #ef4444, #dc2626)',
                color: '#fff',
                padding: '6px 12px',
                fontSize: '13px',
                fontWeight: '500',
                zIndex: 9999,
                textAlign: 'center',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
                ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
            </div>
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    // if (isOnline && showSuccess) {
    //     return (
    //         <div style={{
    //             position: 'fixed',
    //             top: 0,
    //             left: 0,
    //             right: 0,
    //             background: 'linear-gradient(90deg, #43ff65, #22c55e)',
    //             color: '#000',
    //             padding: '6px 12px',
    //             fontSize: '13px',
    //             fontWeight: '500',
    //             zIndex: 9999,
    //             textAlign: 'center',
    //             boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    //         }}>
    //             ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç
    //         </div>
    //     );
    // }

    return null;
};

// =====================================================
// –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =====================================================

function App() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const {
        user,
        isLoading,
        isAuthenticated,
        error,
        token,
        logout,
        refreshUser,
        getAuthHeaders,
        initializeAuth,
        userDisplayName,
        tokensBalance,
        subscriptionType
    } = useAuth();

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    const [serverStatus, setServerStatus] = useState({
        isOnline: false,
        isChecking: false,
        lastChecked: null
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    const checkServerConnection = async () => {
        setServerStatus(prev => ({ ...prev, isChecking: true }));

        try {
            const response = await fetch('http://127.0.0.1:3213/', {
                method: 'GET',
                timeout: 5000
            });

            // const response = await fetch('https://back.grigpe3j.beget.tech', {
            //     method: 'GET',
            //     timeout: 5000
            // });

            const isOnline = response.ok;
            setServerStatus({
                isOnline,
                isChecking: false,
                lastChecked: new Date().toISOString()
            });

            console.log(`üåê –°–µ—Ä–≤–µ—Ä ${isOnline ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);

        } catch (error) {
            console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            setServerStatus({
                isOnline: false,
                isChecking: false,
                lastChecked: new Date().toISOString()
            });
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    useEffect(() => {
        checkServerConnection();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(checkServerConnection, 30000);
        return () => clearInterval(interval);
    }, []);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    useEffect(() => {
        console.log('üîç App State:', {
            user: user ? `${userDisplayName} (${subscriptionType})` : null,
            isLoading,
            isAuthenticated,
            error,
            serverOnline: serverStatus.isOnline,
            tokensBalance
        });
    }, [user, isLoading, isAuthenticated, error, serverStatus.isOnline, userDisplayName, subscriptionType, tokensBalance]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const handleAuthRetry = () => {
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        initializeAuth();
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (isLoading) {
        return (
            <ErrorBoundary>
                <AuthLoader />
            </ErrorBoundary>
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (error) {
        return (
            <ErrorBoundary>
                <AuthError
                    error={error}
                    onRetry={handleAuthRetry}
                />
            </ErrorBoundary>
        );
    }

    // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!isAuthenticated || !user) {
        return (
            <ErrorBoundary>
                <AuthError
                    error="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"
                    onRetry={handleAuthRetry}
                />
            </ErrorBoundary>
        );
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    const userWithMethods = {
        ...user,

        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        isOnline: serverStatus.isOnline,
        backendStatus: serverStatus,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        display_name: userDisplayName,
        is_premium: subscriptionType !== 'free',

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        updateUser: refreshUser,
        refresh: refreshUser,
        logout: logout,

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        updatePoints: (points) => {
            console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:', points);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        },

        trackActivity: (activity) => {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activity);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        },

        showNotification: (message, type = 'info') => {
            console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        },

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        getAuthHeaders,

        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setOnlineStatus: (status) => {
            setServerStatus(prev => ({ ...prev, isOnline: status }));
        }
    };

    return (
        <ErrorBoundary>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
            <ConnectionStatus
                isOnline={serverStatus.isOnline}
                isLoading={serverStatus.isChecking}
            />

            <Router>
                <AnimatePresence mode="wait">
                    <Routes>
                        <Route path="/" element={<Layout user={userWithMethods} />}>
                            <Route index element={<Navigate to="/home" replace />} />

                            {/* –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–∞—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                            <Route
                                path="home"
                                element={<HomePage user={userWithMethods} />}
                            />
                            <Route
                                path="school"
                                element={<SchoolPage user={userWithMethods} />}
                            />
                            <Route
                                path="education"
                                element={<EducationPage user={userWithMethods} />}
                            />
                            <Route
                                path="profile"
                                element={<ProfilePage user={userWithMethods} />}
                            />
                            <Route
                                path="ideas"
                                element={<IdeasPage user={userWithMethods} />}
                            />

                            {/* –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è */}
                            <Route
                                path="videos"
                                element={<VideosPage user={userWithMethods} />}
                            />

                            {/* –°—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤ */}
                            <Route
                                path="test/:testId"
                                element={<TestPage user={userWithMethods} />}
                            />
                            <Route
                                path="chat/:chatId"
                                element={<AIChatPage user={userWithMethods} />}
                            />
                            <Route
                                path="chats-history"
                                element={<ChatHistoryPage user={user} />}
                            />
                            <Route
                                path="*"
                               element={<NotFoundPage />}
                            />
                        </Route>
                    </Routes>
                </AnimatePresence>
            </Router>
        </ErrorBoundary>
    );
}

export default App;