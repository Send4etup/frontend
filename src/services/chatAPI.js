// src/services/chatAPI.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π

/**
 * API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç–∞
 */

// const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://back.grigpe3j.beget.tech/api';
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:3213/api';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
const getAuthHeaders = async () => {
    const token = localStorage.getItem('backend_token');

    return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
    };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞ (general, coding, brainstorm, images, excuses, study_tools)
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
 */
export const createChat = async (title, chatType = 'general') => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/create`, {
            method: 'POST',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify({
                title: title,
                chat_type: chatType,
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const chatData = await response.json();

        console.log('‚úÖ Chat created successfully:', chatData);
        return {
            chat_id: chatData.chat_id,
            success: true,
            data: chatData
        };

    } catch (error) {
        console.error('‚ùå Error creating chat:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendMessage = async (message, chatId, chatType) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/send`, {
            method: 'POST',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify({
                chat_id: chatId,
                tool_type: chatType,
                message: message,
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Message sent successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Array} files - –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendMessageWithFiles = async (message, files, chatId, chatType) => {
    try {
        const formData = new FormData();

        formData.append('message', message);
        formData.append('chat_id', chatId);
        formData.append('tool_type', chatType);

        files.forEach(file => formData.append('files', file));

        const response = await fetch(`${API_BASE_URL}/chat/send-with-files`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('backend_token')}`,
            },
            credentials: 'include',
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Message sent successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ streaming –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–º–µ–Ω—ã
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {Function} onChunk - Callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞
 * @param {Array} fileIds - ID —Ñ–∞–π–ª–æ–≤
 * @param {AbortController} abortController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<string>} –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò
 */
export const getAIResponseStream = async (
    message,
    chatId,
    options = {},
    onChunk,
    fileIds = [],
    abortController = null
) => {
    try {
        const requestBody = {
            message: message,
            chat_id: chatId,
            context: {
                tool_type: options.tool_type || 'general',
                agent_prompt: options.agent_prompt,
                temperature: options.temperature || 0.7,
            },
            file_ids: fileIds
        };

        const fetchOptions = {
            method: 'POST',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify(requestBody)
        };

        if (abortController) {
            fetchOptions.signal = abortController.signal;
        }

        const response = await fetch(
            `${API_BASE_URL}/chat/ai-response`,
            fetchOptions
        );

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let fullResponse = '';

        while (true) {
            if (abortController?.signal.aborted) {
                console.log('‚õî Streaming –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                reader.cancel();
                break;
            }

            const { done, value } = await reader.read();

            if (done) {
                console.log('‚úÖ Streaming –∑–∞–≤–µ—Ä—à–µ–Ω');
                break;
            }

            const chunk = decoder.decode(value, { stream: true });
            fullResponse += chunk;

            if (onChunk && typeof onChunk === 'function') {
                onChunk(chunk);
            }
        }

        return fullResponse;

    } catch (error) {
        if (error.name === 'AbortError') {
            console.log('‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
            throw new Error('STREAMING_CANCELLED');
        }

        console.error('‚ùå Streaming error:', error);
        throw error;
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param {string} agentPrompt - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞
 * @param {Object} context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (temperature, tool_type)
 * @param {Array} fileIds - –ú–∞—Å—Å–∏–≤ ID —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const generateImage = async (chatId, prompt, agentPrompt, context = {}, fileIds = []) => {
    try {
        console.log('üé® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã - –ª–æ–≥–∏—Ä—É–µ–º
        if (fileIds && fileIds.length > 0) {
            console.log('üìé –° —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', fileIds);
        }

        const requestBody = {
            chat_id: chatId,
            message: prompt,
            agent_prompt: agentPrompt,
            context: {
                tool_type: context.tool_type || 'images',
                temperature: context.temperature || 0.7
            }
        };

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º file_ids –µ—Å–ª–∏ –µ—Å—Ç—å
        if (fileIds && fileIds.length > 0) {
            requestBody.file_ids = fileIds;
        }

        const response = await fetch(`${API_BASE_URL}/chat/generate-image`, {
            method: 'POST',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        if (result.success && result.image_url) {
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', result.image_url);
            return {
                success: true,
                data: {
                    image_url: result.image_url,
                    revised_prompt: result.revised_prompt || null,
                    message: result.message || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! üé®',
                    analysis: result.analysis || null // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                }
            };
        } else {
            throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
            success: false,
            error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
    }
};

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} content - –ß–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export const savePartialAIResponse = async (chatId, content) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/save-partial-response`, {
            method: 'POST',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify({
                chat_id: chatId,
                content: content
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        const result = await response.json();
        console.log('‚úÖ Partial response saved:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error saving partial response:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
 * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
 */
export const getUserChats = async (limit = 10, offset = 0) => {
    try {
        let url = `${API_BASE_URL}/chat/history?limit=${limit}`;
        if (offset > 0) {
            url += `&offset=${offset}`;
        }

        const response = await fetch(url, {
            method: 'GET',
            headers: await getAuthHeaders(),
            credentials: 'include',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const chats = await response.json();

        console.log('üìã Chats history received:', chats);

        return {
            success: true,
            data: chats,
        };

    } catch (error) {
        console.error('‚ùå Error getting chats history:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Promise<Object>} –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
 */
export const getChatMessages = async (chatId, limit = 50) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/${chatId}/messages?limit=${limit}`, {
            method: 'GET',
            headers: await getAuthHeaders(),
            credentials: 'include',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const messages = await response.json();

        console.log('üí¨ Chat messages received:', messages);
        return {
            success: true,
            data: messages
        };

    } catch (error) {
        console.error('‚ùå Error getting chat messages:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} newTitle - –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export const updateChatTitle = async (chatId, newTitle) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/${chatId}/title`, {
            method: 'PUT',
            headers: await getAuthHeaders(),
            credentials: 'include',
            body: JSON.stringify({
                title: newTitle.trim()
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Chat title updated successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error updating chat title:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
export const deleteChatById = async (chatId) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/${chatId}`, {
            method: 'DELETE',
            headers: await getAuthHeaders(),
            credentials: 'include',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Chat deleted successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error deleting chat:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
 */
export const getChatInfo = async (chatId) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/${chatId}`, {
            method: 'GET',
            headers: await getAuthHeaders(),
            credentials: 'include',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const chatInfo = await response.json();

        console.log('‚ÑπÔ∏è Chat info received:', chatInfo);
        return {
            success: true,
            data: chatInfo
        };

    } catch (error) {
        console.error('‚ùå Error getting chat info:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

// ========================================
// üé§ –§–£–ù–ö–¶–ò–ò –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò –ê–£–î–ò–û
// ========================================

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper API
 * @param {Blob} audioBlob - –ê—É–¥–∏–æ —Ñ–∞–π–ª (Blob)
 * @param {string} language - –Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
 * @param {string} prompt - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ { success, text, error }
 */
export const transcribeAudio = async (audioBlob, language = 'ru', prompt = null) => {
    try {
        console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∞—É–¥–∏–æ...');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!audioBlob || !(audioBlob instanceof Blob)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª');
        }

        if (audioBlob.size === 0) {
            throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å. 25MB –¥–ª—è Whisper API)
        const MAX_SIZE = 25 * 1024 * 1024; // 25MB
        if (audioBlob.size > MAX_SIZE) {
            const sizeMB = (audioBlob.size / (1024 * 1024)).toFixed(2);
            throw new Error(`–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${sizeMB}MB, –º–∞–∫—Å. 25MB)`);
        }

        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const formData = new FormData();

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        const audioFile = new File([audioBlob], 'recording.webm', {
            type: audioBlob.type || 'audio/webm',
            lastModified: Date.now()
        });

        formData.append('audio', audioFile);
        formData.append('language', language);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if (prompt) {
            formData.append('prompt', prompt);
        } else {
            // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const defaultPrompt = "–≠—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —É—á–µ–±–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π —Ç–µ—Ä–º–∏–Ω—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, Python, JavaScript, —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, —Ñ–æ—Ä–º—É–ª–∞, —Ç–µ–æ—Ä–µ–º–∞.";
            formData.append('prompt', defaultPrompt);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
        const response = await fetch(`${API_BASE_URL}/transcribe`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('backend_token')}`
                // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary –¥–ª—è FormData
            },
            credentials: 'include',
            body: formData
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const errorMessage = errorData.detail || errorData.error || `HTTP error! status: ${response.status}`;
            throw new Error(errorMessage);
        }

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        if (data.success === false) {
            throw new Error(data.error || data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        if (!data.text || !data.text.trim()) {
            console.warn('‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
            return {
                success: false,
                text: '',
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –í–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —à—É–º.'
            };
        }

        // –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        console.log('‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.text.substring(0, 100) + '...');

        return {
            success: true,
            text: data.text.trim(),
            error: null
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', error);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';

        const errorStr = error.message.toLowerCase();

        if (errorStr.includes('rate limit')) {
            userMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (errorStr.includes('network') || errorStr.includes('fetch')) {
            userMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        } else if (errorStr.includes('too large') || errorStr.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')) {
            userMessage = error.message;
        } else if (errorStr.includes('invalid') || errorStr.includes('format')) {
            userMessage = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: WEBM, MP3, WAV, M4A, OGG.';
        } else if (errorStr.includes('timeout')) {
            userMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
        } else if (errorStr.includes('empty') || errorStr.includes('–ø—É—Å—Ç–æ–π')) {
            userMessage = '–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–∏—Å—å.';
        } else if (error.message) {
            userMessage = error.message;
        }

        return {
            success: false,
            text: '',
            error: userMessage
        };
    }
};

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –∏–∑ input[type="file"]
 * –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å File –æ–±—ä–µ–∫—Ç–∞–º–∏
 * @param {File} audioFile - –ê—É–¥–∏–æ —Ñ–∞–π–ª –∏–∑ input
 * @param {string} language - –Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
 * @param {string} prompt - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ { success, text, error }
 */
export const transcribeAudioFile = async (audioFile, language = 'ru', prompt = null) => {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!audioFile || !(audioFile instanceof File)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        const supportedTypes = [
            'audio/webm', 'audio/wav', 'audio/mp3', 'audio/mpeg',
            'audio/mp4', 'audio/m4a', 'audio/ogg', 'audio/flac'
        ];

        if (!supportedTypes.some(type => audioFile.type.includes(type.split('/')[1]))) {
            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: WEBM, MP3, WAV, M4A, OGG, FLAC.');
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º File –≤ Blob –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const audioBlob = new Blob([audioFile], { type: audioFile.type });
        return await transcribeAudio(audioBlob, language, prompt);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error);
        return {
            success: false,
            text: '',
            error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª'
        };
    }
};

// ========================================
// üìö –¢–ò–ü–´ –ß–ê–¢–û–í –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ========================================

/**
 * –¢–∏–ø—ã —á–∞—Ç–æ–≤ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export const CHAT_TYPES = {
    general: '–û–±—â–∏–π —á–∞—Ç',
    coding: '–ö–æ–¥–∏–Ω–≥',
    brainstorm: '–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º',
    images: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    excuses: '–ü—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–º–∞–∑–∫—É',
    study_tools: '–£—á–µ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    homework_help: '–ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–∫–æ–π',
    exam_prep: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º',
    essay_writing: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ—á–∏–Ω–µ–Ω–∏–π',
    psychology: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞
 * @returns {string} –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
export const getChatTypeDisplay = (chatType) => {
    return CHAT_TYPES[chatType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
};

// ========================================
// üì§ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
// ========================================

export default {
    createChat,
    sendMessage,
    sendMessageWithFiles,
    getAIResponseStream,
    savePartialAIResponse,
    getUserChats,
    getChatMessages,
    updateChatTitle,
    deleteChatById,
    getChatInfo,
    transcribeAudio,
    transcribeAudioFile,
    getChatTypeDisplay,
    generateImage,
    CHAT_TYPES
};