// src/services/chatAPI.js
/**
 * API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç–∞
 */

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:3213/api';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
const getAuthHeaders = () => {
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Telegram auth
    const token = localStorage.getItem('backend_token');

    return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
    };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞ (general, coding, brainstorm, images, excuses, study_tools)
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
 */
export const createChat = async (title, chatType = 'general') => {
    try {
        const telegram_auth = localStorage.getItem('telegram_auth')

        const response = await fetch(`${API_BASE_URL}/chat/create`, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify({
                title: title,
                chat_type: chatType,
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const chatData = await response.json();

        console.log('‚úÖ Chat created successfully:', chatData);
        return {
            chat_id: chatData.chat_id,
            success: true,
            data: chatData
        };

    } catch (error) {
        console.error('‚ùå Error creating chat:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param chatType
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendMessage = async (message, chatId, chatType) => {
    try {

        const response = await fetch(`${API_BASE_URL}/chat/send`, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify({
                chat_id: chatId,
                tool_type: chatType,
                message: message,
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Message sent successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Array} files - –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param chatType
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendMessageWithFiles = async (message, files, chatId, chatType) => {
    try {
        const formData = new FormData();

        formData.append('message', message);  // –≤–∞–∂–Ω–æ: message, –∞ –Ω–µ content
        formData.append('chat_id', chatId);
        formData.append('tool_type', chatType);

        files.forEach(file => formData.append('files', file));

        const response = await fetch(`${API_BASE_URL}/chat/send-with-files`, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('‚úÖ Message sent successfully:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –û—Ç–≤–µ—Ç –ò–ò
 */
export const getAIResponse = async (message, chatId, options = {}) => {
    try {
        const requestBody = {
            message: message,
            chat_id: chatId,
            tool_type: options.tool_type || 'general',
            files_count: options.files_count || 0
        };

        const response = await fetch(`${API_BASE_URL}/chat/ai-response`, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        console.log('ü§ñ AI response received:', result);
        return {
            success: true,
            data: result
        };

    } catch (error) {
        console.error('‚ùå Error getting AI response:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
 * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
 */
export const 
    getUserChats = async (limit = 10) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/history?limit=${limit}`, {
            method: 'GET',
            headers: getAuthHeaders()
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const chats = await response.json();

        console.log('üìã Chats history received:', chats);

        return {
            success: true,
            data: chats,
        };

    } catch (error) {
        console.error('‚ùå Error getting chats history:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Promise<Object>} –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
 */
export const getChatMessages = async (chatId, limit = 50) => {
    try {
        const response = await fetch(`${API_BASE_URL}/chat/${chatId}/messages?limit=${limit}`, {
            method: 'GET',
            headers: getAuthHeaders()
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }

        const messages = await response.json();

        console.log('üí¨ Chat messages received:', messages);
        return {
            success: true,
            data: messages
        };

    } catch (error) {
        console.error('‚ùå Error getting chat messages:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

/**
 * –¢–∏–ø—ã —á–∞—Ç–æ–≤ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export const CHAT_TYPES = {
    general: '–û–±—â–∏–π —á–∞—Ç',
    coding: '–ö–æ–¥–∏–Ω–≥',
    brainstorm: '–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º',
    images: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    excuses: '–ü—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–º–∞–∑–∫—É',
    study_tools: '–£—á–µ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    homework_help: '–ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–∫–æ–π',
    exam_prep: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º',
    essay_writing: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ—á–∏–Ω–µ–Ω–∏–π',
    psychology: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞
 * @param {string} chatType - –¢–∏–ø —á–∞—Ç–∞
 * @returns {string} –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
export const getChatTypeDisplay = (chatType) => {
    return CHAT_TYPES[chatType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
    createChat,
    sendMessage,
    getAIResponse,
    getUserChats,
    getChatMessages,
    getChatTypeDisplay,
    CHAT_TYPES
};